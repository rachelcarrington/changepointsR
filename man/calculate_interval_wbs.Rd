% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculate_interval_wbs.R
\name{calculate_interval_wbs}
\alias{calculate_interval_wbs}
\title{Calculate interval for wild binary segmentation}
\usage{
calculate_interval_wbs(
  y,
  nu,
  results = NULL,
  b = NULL,
  d = NULL,
  s = NULL,
  e = NULL,
  rand_ints = NULL,
  nu2 = NULL,
  nuTy = NULL,
  threshold = NULL,
  n.cp = NULL
)
}
\arguments{
\item{y}{Numeric vector of data.}

\item{nu}{Numeric vector.}

\item{results}{Output of \code{wild_binary_segmentation}.}

\item{b}{Numeric vector of changepoints. Ignored if \code{results} specified.}

\item{d}{Numeric vector containing directions of changepoints; all entries should be either +1 or -1. Ignored if \code{results} specified.}

\item{s}{Numeric vector containing starting indices of changepoint-containing intervals. Ignored if \code{results} specified.}

\item{e}{Numeric vector containing ending indices of changepoint-containing intervals.  Ignored if \code{results} specified.}

\item{rand_ints}{Matrix containing starting and ending points of random intervals used for wild binary segmentation algorithm.
Ignored if \code{results} specified.}

\item{nu2}{Value of \eqn{||\nu||_2^2}.}

\item{nuTy}{Value of \eqn{\nu^T y}.}

\item{threshold}{Changepoint threshold used in wild binary segmentation algorithm. Ignored if \code{results} specified.}

\item{n.cp}{Maximum number of changepoints to detect.}
}
\value{
A 2-dimensional vector.
}
\description{
Find values of phi which satisfy the required inequalities so that applying wild binary segmentation to \eqn{y'(\phi)}
returns \code{(b, d)}.
Option to only consider part of \code{(b, d)}, e.g. if we want \code{b[1]} to be in the set of detected changepoints but are not concerned
about other changepoints.
}
\details{
Used inside \code{calculate_S} if \code{method = "wbs"}.
}
\examples{
set.seed(100)
y <- rnorm(100) + c(rep(1,50), rep(-1,50))
results <- wild_binary_segmentation(y, threshold=4, num_rand_samples=50)
b <- results$results$b
h <- 10
nu <- c(rep(0, b[1]-h), rep(1/h, h), rep(-1/h, h), rep(0, length(y)-b[1]-h))
calculate_interval_wbs(y, nu, results=results)

}
